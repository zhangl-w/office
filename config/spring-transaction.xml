<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd 
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd ">
        
<!-- 事务管理器   对mybatis操作数据库进行事务控制，spring使用jdbc的事务控制类 -->
<!-- id属性值可以随便起 -->
<!-- id属性如下固定 -->
<!-- 子标签property的name属性固定不变，ref属性的值是上一个spring-db.xml文件中dbcp数据源bean标签的id值 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 数据源dataSource在spring-db.xml中已经配置-->
        <property name="dataSource" ref="mydataSource" />
    </bean>
    
    <!-- 通知 -->
<!-- id属性随便起 -->
<!-- transaction-manager属性的值，是上面事务管理器的bean标签的id属性的值 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- 传播行为 -->
			<!--
			PROPAGATION_REQUIRED - 支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
			PROPAGATION_SUPPORTS - 支持当前事务，如果当前没有事务，就以非事务方式执行。 
			PROPAGATION_MANDATORY - 支持当前事务，如果当前没有事务，就抛出异常。 
			PROPAGATION_REQUIRES_NEW - 新建事务，如果当前存在事务，把当前事务挂起。 
			PROPAGATION_NOT_SUPPORTED - 以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
			PROPAGATION_NEVER - 以非事务方式执行，如果当前存在事务，则抛出异常。

			isolation属性 - [隔离级别]

			https://www.cnblogs.com/yangy608/archive/2011/06/29/2093478.html

			read-only只读
			read-only只读事务配置是为了避免多次查询结果不一致，即在进行数据库查询之前，已经查询的结果不能有变动
			-->
            <!--
            tx:method作用是，指定aop:advisor标签的属性pointcut找到的类里，哪个方法加事务，方法名字采用下面通配形式
            tx:method子标签的name属性的值，采用通配符形式，*代表任意字符
            下面的name属性值的配置的含义是：以四个单词开头的方法都被加入事务
            -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="insert*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <!-- 
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
             -->
        </tx:attributes>
    </tx:advice>
    
    <aop:config>
	<!--
	第一个 * - 通配 返回值类型
	第二个 * - 通配包com.neusoft.office.pc.service.impl下的class
	第三个 * - 通配包com.neusoft.office.pc.service.impl下的class的方法
	第四个 .. - 通配 方法可以有0个或多个参数
	-->
    <!-- advice-ref的值是上面tx:advice标签的id属性的值 -->
    	<aop:advisor advice-ref="txAdvice" pointcut="execution(* com.neusoft.office.*.service.impl.*.*(..))"/>
	</aop:config>
</beans>